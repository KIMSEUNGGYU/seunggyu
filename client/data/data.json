{
  "posts": [
    {
      "title": "Test",
      "date": "2021.04.07",
      "description": "test description",
      "tags": [
        "test"
      ],
      "content": "hello react editor world!",
      "id": 1
    },
    {
      "title": "Test",
      "date": "2021.04.07",
      "description": "test description",
      "tags": [
        "test"
      ],
      "content": {
        "title": "자료 구조 - 스택",
        "date": "2021.04.07",
        "description": "test description",
        "tags": [
          "자료구조, 스택"
        ],
        "content": "# 스택\n\n- 가장 나중에 삽입한 데이터를 가장 먼저 빼내는 데이터 구조\n- LIFO (Last In First Out)\n\n## 기능\n\n- `push`\n\n    데이터를 스택에 넣기\n\n- `pop`\n\n    데이터를 스택에서 꺼내기\n\n## 스택의 장단점\n\n### 장점\n\n- 구조가 단순하고 구현이 쉬움\n- 데이터 저장/읽기 속도가 빠름\n\n### 단점\n\n- 데이터 최대 갯수를 미리 정해야함\n    - 파이썬의 경우 재귀 함수는 최대 1000번 까지만 가능\n- 저장 공간의 낭비가 발생할 수 있음.\n    - 미리 최대 갯수 만큼 저장 공간을 확보해야함\n\n→ 스택은 단순하고 빠른 성능을 위해 사용되므로, 보통 배열 구조를 활용해서 구현하는 것이 일반적임. 이 경우, 위에서 열거한 단점이 있을 수 있음\n\n## 리스트로 스택 구현하기\n\n- 리스트로 스택 구현하기\n\n    ```python\n    stack_list = list()\n\n    def push(data):\n        \"\"\" 데이터 삽입 \"\"\"\n        stack_list.append(data)\n        \n    def pop():\n        \"\"\" 데이터 삭제 \"\"\"\n        if len(stack_list) <= 0:\n            return -1   ## 에러 처리\n        data = stack_list[-1]\n        del stack_list[-1]\n        return data\n        \n    ## 실행\n    for i in range(10):\n        push(i)\n\n    print(pop())\n    print(pop())\n    ```\n\n- 사실상 파이썬에서 제공하는 `append()` 와 `pop()` 을 사용하면 스택 처럼 활용 가능\n\n## 스택 활용\n\n- 컴퓨터 내부의 프로세스 구조의 **함수 동작 방식**\n\n    프로세스에서 함수를 처리하는 동작 방식에서 스택이라는 자료 구조 사용\n\n    - 재귀함수를 이용한 간단한 예제"
      },
      "id": 2
    },
    {
      "title": "Test",
      "date": "2021.04.07",
      "description": "test description",
      "tags": [
        "test"
      ],
      "content": {
        "title": "ㅅㄷㄴㅅ",
        "date": "2021.04.07",
        "description": "test description",
        "tags": [
          "ㅎㅎㅎ"
        ],
        "content": "hello react editor world!"
      },
      "id": 3
    }
  ]
}